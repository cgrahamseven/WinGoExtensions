using System;
using System.Diagnostics;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;

namespace WinGo
{
    public static class Ps
    {
        [DllImport( "ntdll.dll" )]
        public static extern IntPtr NtSuspendProcess( IntPtr ProcessHandle );
        [DllImport( "ntdll.dll" )]
        public static extern IntPtr NtResumeProcess( IntPtr ProcessHandle );

        public static string PsList()
        {
            string results = string.Format( 
                "{0,-10}  {1,-10}\t{2,-10}\t\t{3,-10}\n\n", 
                "Pid", 
                "Memory Usage (bytes)", 
                "Process Name", 
                "Process Image Path" 
            );
            Process[] procList = Process.GetProcesses();

            foreach ( Process proc in procList )
            {
                try
                {
                    results += string.Format(
                        "{0,-10}  {1,-10:0,0}\t\t\t{2,-20}\t{3,-10}",
                        proc.Id,
                        proc.WorkingSet64,
                        proc.ProcessName,
                        proc.MainModule.FileName
                    ) + Environment.NewLine;
                }
                catch ( Exception )
                {
                    // We might not have permission to access some processes
                }
            }
            return results;
        }
        public static string PsKill( Int32 pid )
        {
            try
            {
                Process.GetProcessById( pid ).Kill();
            }
            catch ( Exception )
            {
                return "[-] Failed";
            }
            return "[+] Success";
        }
        public static string PsSuspend( Int32 pid )
        {
            IntPtr result = IntPtr.Zero;
            try
            {
                result = NtSuspendProcess( Process.GetProcessById( pid ).Handle );
            }
            catch ( Exception ex )
            {
                return ex.ToString();
            }
            return result == IntPtr.Zero ? "[+] Success" : "[-] Failed";
        }
        public static string PsResume( Int32 pid )
        {
            IntPtr result = IntPtr.Zero;
            try
            {
                result = NtResumeProcess( Process.GetProcessById( pid ).Handle );
            }
            catch ( Exception ex )
            {
                return ex.ToString();
            }
            return result == IntPtr.Zero ? "[+] Success" : "[-] Failed";
        }
        public static string PsStart( string imagePath, string args )
        {
            try
            {
                Regex re = new Regex( @"^[a-z]:\\", RegexOptions.IgnoreCase );

                if ( !re.IsMatch( imagePath ) )
                    return "[-] Process image must be fully qualified path";

                using ( Process newProc = new Process() )
                {
                    newProc.StartInfo.FileName = imagePath;
                    if ( args != null )
                        newProc.StartInfo.Arguments = args;
                    return newProc.Start() ? "[+] Success" : "[-] Failed";
                }
            }
            catch ( Exception ex )
            {
                return ex.ToString();
            }
        }
        public static void Main()
        {

        }
    }
}
